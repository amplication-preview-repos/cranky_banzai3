/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Deployment as PrismaDeployment,
  Script as PrismaScript,
} from "@prisma/client";

export class DeploymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeploymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deployment.count(args);
  }

  async deployments(
    args: Prisma.DeploymentFindManyArgs
  ): Promise<PrismaDeployment[]> {
    return this.prisma.deployment.findMany(args);
  }
  async deployment(
    args: Prisma.DeploymentFindUniqueArgs
  ): Promise<PrismaDeployment | null> {
    return this.prisma.deployment.findUnique(args);
  }
  async createDeployment(
    args: Prisma.DeploymentCreateArgs
  ): Promise<PrismaDeployment> {
    return this.prisma.deployment.create(args);
  }
  async updateDeployment(
    args: Prisma.DeploymentUpdateArgs
  ): Promise<PrismaDeployment> {
    return this.prisma.deployment.update(args);
  }
  async deleteDeployment(
    args: Prisma.DeploymentDeleteArgs
  ): Promise<PrismaDeployment> {
    return this.prisma.deployment.delete(args);
  }

  async getScript(parentId: string): Promise<PrismaScript | null> {
    return this.prisma.deployment
      .findUnique({
        where: { id: parentId },
      })
      .script();
  }
}
