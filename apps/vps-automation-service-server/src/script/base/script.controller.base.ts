/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScriptService } from "../script.service";
import { ScriptCreateInput } from "./ScriptCreateInput";
import { Script } from "./Script";
import { ScriptFindManyArgs } from "./ScriptFindManyArgs";
import { ScriptWhereUniqueInput } from "./ScriptWhereUniqueInput";
import { ScriptUpdateInput } from "./ScriptUpdateInput";
import { DeploymentFindManyArgs } from "../../deployment/base/DeploymentFindManyArgs";
import { Deployment } from "../../deployment/base/Deployment";
import { DeploymentWhereUniqueInput } from "../../deployment/base/DeploymentWhereUniqueInput";

export class ScriptControllerBase {
  constructor(protected readonly service: ScriptService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Script })
  async createScript(@common.Body() data: ScriptCreateInput): Promise<Script> {
    return await this.service.createScript({
      data: data,
      select: {
        content: true,
        createdAt: true,
        creationDate: true,
        id: true,
        isActive: true,
        lastUpdated: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Script] })
  @ApiNestedQuery(ScriptFindManyArgs)
  async scripts(@common.Req() request: Request): Promise<Script[]> {
    const args = plainToClass(ScriptFindManyArgs, request.query);
    return this.service.scripts({
      ...args,
      select: {
        content: true,
        createdAt: true,
        creationDate: true,
        id: true,
        isActive: true,
        lastUpdated: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Script })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async script(
    @common.Param() params: ScriptWhereUniqueInput
  ): Promise<Script | null> {
    const result = await this.service.script({
      where: params,
      select: {
        content: true,
        createdAt: true,
        creationDate: true,
        id: true,
        isActive: true,
        lastUpdated: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Script })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScript(
    @common.Param() params: ScriptWhereUniqueInput,
    @common.Body() data: ScriptUpdateInput
  ): Promise<Script | null> {
    try {
      return await this.service.updateScript({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          creationDate: true,
          id: true,
          isActive: true,
          lastUpdated: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Script })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScript(
    @common.Param() params: ScriptWhereUniqueInput
  ): Promise<Script | null> {
    try {
      return await this.service.deleteScript({
        where: params,
        select: {
          content: true,
          createdAt: true,
          creationDate: true,
          id: true,
          isActive: true,
          lastUpdated: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/deployments")
  @ApiNestedQuery(DeploymentFindManyArgs)
  async findDeployments(
    @common.Req() request: Request,
    @common.Param() params: ScriptWhereUniqueInput
  ): Promise<Deployment[]> {
    const query = plainToClass(DeploymentFindManyArgs, request.query);
    const results = await this.service.findDeployments(params.id, {
      ...query,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        log: true,

        script: {
          select: {
            id: true,
          },
        },

        startTime: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deployments")
  async connectDeployments(
    @common.Param() params: ScriptWhereUniqueInput,
    @common.Body() body: DeploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deployments: {
        connect: body,
      },
    };
    await this.service.updateScript({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deployments")
  async updateDeployments(
    @common.Param() params: ScriptWhereUniqueInput,
    @common.Body() body: DeploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deployments: {
        set: body,
      },
    };
    await this.service.updateScript({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deployments")
  async disconnectDeployments(
    @common.Param() params: ScriptWhereUniqueInput,
    @common.Body() body: DeploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deployments: {
        disconnect: body,
      },
    };
    await this.service.updateScript({
      where: params,
      data,
      select: { id: true },
    });
  }
}
