/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VpsConfiguration } from "./VpsConfiguration";
import { VpsConfigurationCountArgs } from "./VpsConfigurationCountArgs";
import { VpsConfigurationFindManyArgs } from "./VpsConfigurationFindManyArgs";
import { VpsConfigurationFindUniqueArgs } from "./VpsConfigurationFindUniqueArgs";
import { CreateVpsConfigurationArgs } from "./CreateVpsConfigurationArgs";
import { UpdateVpsConfigurationArgs } from "./UpdateVpsConfigurationArgs";
import { DeleteVpsConfigurationArgs } from "./DeleteVpsConfigurationArgs";
import { VpsConfigurationService } from "../vpsConfiguration.service";
@graphql.Resolver(() => VpsConfiguration)
export class VpsConfigurationResolverBase {
  constructor(protected readonly service: VpsConfigurationService) {}

  async _vpsConfigurationsMeta(
    @graphql.Args() args: VpsConfigurationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VpsConfiguration])
  async vpsConfigurations(
    @graphql.Args() args: VpsConfigurationFindManyArgs
  ): Promise<VpsConfiguration[]> {
    return this.service.vpsConfigurations(args);
  }

  @graphql.Query(() => VpsConfiguration, { nullable: true })
  async vpsConfiguration(
    @graphql.Args() args: VpsConfigurationFindUniqueArgs
  ): Promise<VpsConfiguration | null> {
    const result = await this.service.vpsConfiguration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VpsConfiguration)
  async createVpsConfiguration(
    @graphql.Args() args: CreateVpsConfigurationArgs
  ): Promise<VpsConfiguration> {
    return await this.service.createVpsConfiguration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VpsConfiguration)
  async updateVpsConfiguration(
    @graphql.Args() args: UpdateVpsConfigurationArgs
  ): Promise<VpsConfiguration | null> {
    try {
      return await this.service.updateVpsConfiguration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VpsConfiguration)
  async deleteVpsConfiguration(
    @graphql.Args() args: DeleteVpsConfigurationArgs
  ): Promise<VpsConfiguration | null> {
    try {
      return await this.service.deleteVpsConfiguration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
