/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ErrorNotificationService } from "../errorNotification.service";
import { ErrorNotificationCreateInput } from "./ErrorNotificationCreateInput";
import { ErrorNotification } from "./ErrorNotification";
import { ErrorNotificationFindManyArgs } from "./ErrorNotificationFindManyArgs";
import { ErrorNotificationWhereUniqueInput } from "./ErrorNotificationWhereUniqueInput";
import { ErrorNotificationUpdateInput } from "./ErrorNotificationUpdateInput";

export class ErrorNotificationControllerBase {
  constructor(protected readonly service: ErrorNotificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ErrorNotification })
  async createErrorNotification(
    @common.Body() data: ErrorNotificationCreateInput
  ): Promise<ErrorNotification> {
    return await this.service.createErrorNotification({
      data: data,
      select: {
        createdAt: true,
        errorType: true,
        id: true,
        isResolved: true,
        message: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ErrorNotification] })
  @ApiNestedQuery(ErrorNotificationFindManyArgs)
  async errorNotifications(
    @common.Req() request: Request
  ): Promise<ErrorNotification[]> {
    const args = plainToClass(ErrorNotificationFindManyArgs, request.query);
    return this.service.errorNotifications({
      ...args,
      select: {
        createdAt: true,
        errorType: true,
        id: true,
        isResolved: true,
        message: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ErrorNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async errorNotification(
    @common.Param() params: ErrorNotificationWhereUniqueInput
  ): Promise<ErrorNotification | null> {
    const result = await this.service.errorNotification({
      where: params,
      select: {
        createdAt: true,
        errorType: true,
        id: true,
        isResolved: true,
        message: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ErrorNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateErrorNotification(
    @common.Param() params: ErrorNotificationWhereUniqueInput,
    @common.Body() data: ErrorNotificationUpdateInput
  ): Promise<ErrorNotification | null> {
    try {
      return await this.service.updateErrorNotification({
        where: params,
        data: data,
        select: {
          createdAt: true,
          errorType: true,
          id: true,
          isResolved: true,
          message: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ErrorNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteErrorNotification(
    @common.Param() params: ErrorNotificationWhereUniqueInput
  ): Promise<ErrorNotification | null> {
    try {
      return await this.service.deleteErrorNotification({
        where: params,
        select: {
          createdAt: true,
          errorType: true,
          id: true,
          isResolved: true,
          message: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
