/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ErrorNotification } from "./ErrorNotification";
import { ErrorNotificationCountArgs } from "./ErrorNotificationCountArgs";
import { ErrorNotificationFindManyArgs } from "./ErrorNotificationFindManyArgs";
import { ErrorNotificationFindUniqueArgs } from "./ErrorNotificationFindUniqueArgs";
import { CreateErrorNotificationArgs } from "./CreateErrorNotificationArgs";
import { UpdateErrorNotificationArgs } from "./UpdateErrorNotificationArgs";
import { DeleteErrorNotificationArgs } from "./DeleteErrorNotificationArgs";
import { ErrorNotificationService } from "../errorNotification.service";
@graphql.Resolver(() => ErrorNotification)
export class ErrorNotificationResolverBase {
  constructor(protected readonly service: ErrorNotificationService) {}

  async _errorNotificationsMeta(
    @graphql.Args() args: ErrorNotificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ErrorNotification])
  async errorNotifications(
    @graphql.Args() args: ErrorNotificationFindManyArgs
  ): Promise<ErrorNotification[]> {
    return this.service.errorNotifications(args);
  }

  @graphql.Query(() => ErrorNotification, { nullable: true })
  async errorNotification(
    @graphql.Args() args: ErrorNotificationFindUniqueArgs
  ): Promise<ErrorNotification | null> {
    const result = await this.service.errorNotification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ErrorNotification)
  async createErrorNotification(
    @graphql.Args() args: CreateErrorNotificationArgs
  ): Promise<ErrorNotification> {
    return await this.service.createErrorNotification({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ErrorNotification)
  async updateErrorNotification(
    @graphql.Args() args: UpdateErrorNotificationArgs
  ): Promise<ErrorNotification | null> {
    try {
      return await this.service.updateErrorNotification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ErrorNotification)
  async deleteErrorNotification(
    @graphql.Args() args: DeleteErrorNotificationArgs
  ): Promise<ErrorNotification | null> {
    try {
      return await this.service.deleteErrorNotification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
